{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ember-book-club2/tests/app.lint-test.js","ember-book-club2/tests/integration/components/book-form-test.js","ember-book-club2/tests/integration/components/report-form-test.js","ember-book-club2/tests/integration/components/speaker-form-test.js","ember-book-club2/tests/test-helper.js","ember-book-club2/tests/tests.lint-test.js","ember-book-club2/tests/unit/adapters/application-test.js","ember-book-club2/tests/unit/controllers/book-test.js","ember-book-club2/tests/unit/controllers/book/create-test.js","ember-book-club2/tests/unit/controllers/book/detail-test.js","ember-book-club2/tests/unit/controllers/book/edit-test.js","ember-book-club2/tests/unit/controllers/report-test.js","ember-book-club2/tests/unit/controllers/report/create-test.js","ember-book-club2/tests/unit/controllers/report/detail-test.js","ember-book-club2/tests/unit/controllers/report/edit-test.js","ember-book-club2/tests/unit/controllers/speaker-test.js","ember-book-club2/tests/unit/controllers/speaker/create-test.js","ember-book-club2/tests/unit/controllers/speaker/detail-test.js","ember-book-club2/tests/unit/controllers/speaker/edit-test.js","ember-book-club2/tests/unit/models/book-test.js","ember-book-club2/tests/unit/models/report-test.js","ember-book-club2/tests/unit/models/speaker-test.js","ember-book-club2/tests/unit/routes/404-test.js","ember-book-club2/tests/unit/routes/book-test.js","ember-book-club2/tests/unit/routes/book/create-test.js","ember-book-club2/tests/unit/routes/book/detail-test.js","ember-book-club2/tests/unit/routes/book/edit-test.js","ember-book-club2/tests/unit/routes/error-test.js","ember-book-club2/tests/unit/routes/index-test.js","ember-book-club2/tests/unit/routes/loading-test.js","ember-book-club2/tests/unit/routes/report-test.js","ember-book-club2/tests/unit/routes/report/create-test.js","ember-book-club2/tests/unit/routes/report/detail-test.js","ember-book-club2/tests/unit/routes/report/edit-test.js","ember-book-club2/tests/unit/routes/speaker-test.js","ember-book-club2/tests/unit/routes/speaker/create-test.js","ember-book-club2/tests/unit/routes/speaker/detail-test.js","ember-book-club2/tests/unit/routes/speaker/edit-test.js","ember-book-club2/tests/unit/serializers/application-test.js","ember-book-club2/tests/unit/serializers/book-test.js","ember-book-club2/tests/unit/serializers/report-test.js","ember-book-club2/tests/unit/serializers/speaker-test.js","ember-book-club2/tests/unit/services/data-test.js","ember-book-club2/tests/unit/transforms/date-string-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('ember-book-club2/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass ESLint\\n\\n14:50 - \\'query\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/book-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/book-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/report-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/report-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/speaker-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/speaker-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/book.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/book/create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/book/create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/book/detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/book/detail.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/book/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/book/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/report.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/report.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/report/create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/report/create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/report/detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/report/detail.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/report/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/report/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/speaker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/speaker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/speaker/create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/speaker/create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/speaker/detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/speaker/detail.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/speaker/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/speaker/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/book.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/report.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/report.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/speaker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/speaker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/404.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/404.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/book.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/book/create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/book/create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/book/detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/book/detail.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/book/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/book/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/error.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/error.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/loading.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/loading.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/report.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/report.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/report/create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/report/create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/report/detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/report/detail.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/report/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/report/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/speaker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/speaker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/speaker/create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/speaker/create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/speaker/detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/speaker/detail.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/speaker/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/speaker/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/application.js should pass ESLint\\n\\n6:38 - \\'method\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('serializers/book.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/book.js should pass ESLint\\n\\n8:23 - \\'options\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('serializers/report.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/report.js should pass ESLint\\n\\n8:23 - \\'options\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('serializers/speaker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/speaker.js should pass ESLint\\n\\n8:23 - \\'options\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('services/data.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/data.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transforms/date-string.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/date-string.js should pass ESLint\\n\\n');\n  });\n});","define('ember-book-club2/tests/integration/components/book-form-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | book-form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"uGOy+6PC\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"book-form\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"044e3rT8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"book-form\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('ember-book-club2/tests/integration/components/report-form-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | report-form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Uc7Rj+O8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"report-form\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"d3RmrA3o\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"report-form\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('ember-book-club2/tests/integration/components/speaker-form-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | speaker-form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"qcp+twW8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"speaker-form\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"TWXDckYV\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"speaker-form\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('ember-book-club2/tests/test-helper', ['ember-book-club2/app', 'ember-book-club2/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('ember-book-club2/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('integration/components/book-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/book-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/report-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/report-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/speaker-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/speaker-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/book-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/book-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/book/create-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/book/create-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/book/detail-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/book/detail-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/book/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/book/edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/report-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/report-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/report/create-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/report/create-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/report/detail-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/report/detail-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/report/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/report/edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/speaker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/speaker-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/speaker/create-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/speaker/create-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/speaker/detail-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/speaker/detail-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/speaker/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/speaker/edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/book-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/book-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/report-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/report-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/speaker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/speaker-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/404-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/404-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/book-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/book-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/book/create-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/book/create-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/book/detail-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/book/detail-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/book/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/book/edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/error-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/error-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/loading-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/loading-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/report-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/report-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/report/create-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/report/create-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/report/detail-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/report/detail-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/report/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/report/edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/speaker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/speaker-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/speaker/create-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/speaker/create-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/speaker/detail-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/speaker/detail-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/speaker/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/speaker/edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/book-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/book-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/report-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/report-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/speaker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/speaker-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/data-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/data-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/transforms/date-string-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/transforms/date-string-test.js should pass ESLint\\n\\n');\n  });\n});","define('ember-book-club2/tests/unit/adapters/application-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n  });\n});","define('ember-book-club2/tests/unit/controllers/book-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | book', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:book');\n      assert.ok(controller);\n    });\n  });\n});","define('ember-book-club2/tests/unit/controllers/book/create-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | book/create', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:book/create');\n      assert.ok(controller);\n    });\n  });\n});","define('ember-book-club2/tests/unit/controllers/book/detail-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | book/detail', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:book/detail');\n      assert.ok(controller);\n    });\n  });\n});","define('ember-book-club2/tests/unit/controllers/book/edit-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | book/edit', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:book/edit');\n      assert.ok(controller);\n    });\n  });\n});","define('ember-book-club2/tests/unit/controllers/report-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | report', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:report');\n      assert.ok(controller);\n    });\n  });\n});","define('ember-book-club2/tests/unit/controllers/report/create-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | report/create', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:report/create');\n      assert.ok(controller);\n    });\n  });\n});","define('ember-book-club2/tests/unit/controllers/report/detail-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | report/detail', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:report/detail');\n      assert.ok(controller);\n    });\n  });\n});","define('ember-book-club2/tests/unit/controllers/report/edit-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | report/edit', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:report/edit');\n      assert.ok(controller);\n    });\n  });\n});","define('ember-book-club2/tests/unit/controllers/speaker-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | speaker', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:speaker');\n      assert.ok(controller);\n    });\n  });\n});","define('ember-book-club2/tests/unit/controllers/speaker/create-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | speaker/create', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:speaker/create');\n      assert.ok(controller);\n    });\n  });\n});","define('ember-book-club2/tests/unit/controllers/speaker/detail-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | speaker/detail', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:speaker/detail');\n      assert.ok(controller);\n    });\n  });\n});","define('ember-book-club2/tests/unit/controllers/speaker/edit-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | speaker/edit', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:speaker/edit');\n      assert.ok(controller);\n    });\n  });\n});","define('ember-book-club2/tests/unit/models/book-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | book', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('book', {}));\n      assert.ok(model);\n    });\n  });\n});","define('ember-book-club2/tests/unit/models/report-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | report', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('report', {}));\n      assert.ok(model);\n    });\n  });\n});","define('ember-book-club2/tests/unit/models/speaker-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | speaker', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('speaker', {}));\n      assert.ok(model);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/404-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | 404', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:404');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/book-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | book', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:book');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/book/create-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | book/create', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:book/create');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/book/detail-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | book/detail', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:book/detail');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/book/edit-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | book/edit', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:book/edit');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/error-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | error', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:error');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/index-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/loading-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | loading', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:loading');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/report-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | report', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:report');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/report/create-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | report/create', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:report/create');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/report/detail-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | report/detail', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:report/detail');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/report/edit-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | report/edit', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:report/edit');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/speaker-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | speaker', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:speaker');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/speaker/create-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | speaker/create', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:speaker/create');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/speaker/detail-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | speaker/detail', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:speaker/detail');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/routes/speaker/edit-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | speaker/edit', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:speaker/edit');\n      assert.ok(route);\n    });\n  });\n});","define('ember-book-club2/tests/unit/serializers/application-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let serializer = store.serializerFor('application');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let record = Ember.run(() => store.createRecord('application', {}));\n\n      let serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('ember-book-club2/tests/unit/serializers/book-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | book', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let serializer = store.serializerFor('book');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let record = Ember.run(() => store.createRecord('book', {}));\n\n      let serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('ember-book-club2/tests/unit/serializers/report-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | report', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let serializer = store.serializerFor('report');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let record = Ember.run(() => store.createRecord('report', {}));\n\n      let serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('ember-book-club2/tests/unit/serializers/speaker-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | speaker', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let serializer = store.serializerFor('speaker');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let record = Ember.run(() => store.createRecord('speaker', {}));\n\n      let serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('ember-book-club2/tests/unit/services/data-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | data', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:data');\n      assert.ok(service);\n    });\n  });\n});","define('ember-book-club2/tests/unit/transforms/date-string-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('transform:date-string', 'Unit | Transform | date string', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let transform = this.owner.lookup('transform:date-string');\n      assert.ok(transform);\n    });\n  });\n});","define('ember-book-club2/config/environment', [], function() {\n  var prefix = 'ember-book-club2';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('ember-book-club2/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsrtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}